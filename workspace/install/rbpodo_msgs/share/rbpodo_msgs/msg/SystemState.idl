// generated from rosidl_adapter/resource/msg.idl.em
// with input from rbpodo_msgs/msg/SystemState.msg
// generated code does not contain a copyright notice


module rbpodo_msgs {
  module msg {
    typedef float float__6[6];
    typedef float float__4[4];
    typedef boolean boolean__16[16];
    typedef int32 int32__6[6];
    typedef float float__2[2];
    typedef boolean boolean__2[2];
    typedef int8 int8__2[2];
    @verbatim (language="comment", text=
      "SystemState" "\n"
      "Please check the following for more details. " "\n"
      "https://githubcom/RainbowRobotics/rbpodo/blob/main/include/rbpodo/data_type.hpp")
    struct SystemState {
      @verbatim (language="comment", text=
        "basic timer")
      float time;

      @verbatim (language="comment", text=
        "reference (desired) joint position (unit: rad)")
      float__6 jnt_ref;

      @verbatim (language="comment", text=
        "mesaured joint position (unit: rad)")
      float__6 jnt_ang;

      @verbatim (language="comment", text=
        "mesaured joint current (unit: amp)")
      float__6 jnt_cur;

      @verbatim (language="comment", text=
        "TCP posture info based on reference-joint-angles (unit: m & rad) [x, y, z, rx, ry, rz] (orientation = EulerZYX(rz, ry, rx))")
      float__6 tcp_ref;

      @verbatim (language="comment", text=
        "TCP posture info based on encoder-joint-angles (unit: m & rad)")
      float__6 tcp_pos;

      @verbatim (language="comment", text=
        "control box analog input measurement information of each channel (unit: Voltage)")
      float__4 analog_in;

      @verbatim (language="comment", text=
        "control box analog output information of each channel (unit: Voltage)")
      float__4 analog_out;

      @verbatim (language="comment", text=
        "control box digital input measurement information of each channel")
      boolean__16 digital_in;

      @verbatim (language="comment", text=
        "control box digital output information of each channel")
      boolean__16 digital_out;

      @verbatim (language="comment", text=
        "measured temperature of each joint (unit: celsius)")
      float__6 jnt_temperature;

      @verbatim (language="comment", text=
        "target program counter position during function")
      @unit (value="STEP")
      int32 task_pc;

      @verbatim (language="comment", text=
        "target program execution number in page")
      @unit (value="PLAY")
      int32 task_repeat;

      @verbatim (language="comment", text=
        "running program counter position")
      int32 task_run_id;

      @verbatim (language="comment", text=
        "current program execution number in page")
      @unit (value="PLAY")
      int32 task_run_num;

      @verbatim (language="comment", text=
        "time since the program started (unit: second)")
      int32 task_run_time;

      @verbatim (language="comment", text=
        "basic state of 'Program Execution'")
      int32 task_state;

      @verbatim (language="comment", text=
        "default speed multiplier value of robot motion (=speed bar in UI) (value: 0 ~ 1)")
      float default_speed;

      @verbatim (language="comment", text=
        "move (motion) state")
      int32 robot_state;

      @verbatim (language="comment", text=
        "information chunk to deliver various state information (power and others) It consists of a combination of bits")
      int32 information_chunk_1;

      @verbatim (language="comment", text=
        "basic state of each joint")
      int32__6 jnt_info;

      @verbatim (language="comment", text=
        "out collision detection On/Off State (true=On / false=Off)")
      boolean collision_detect_onoff;

      @verbatim (language="comment", text=
        "free-drive (Gravity-compensation) On/Off State (true=On / false=Off)")
      boolean is_freedrive_mode;

      @verbatim (language="comment", text=
        "mode of operation: Simulation mode=true / Real Robot mode=false")
      boolean real_vs_simulation_mode;

      @verbatim (language="comment", text=
        "robot arm activation (Initialization) stage info (0 -> 6)")
      int8 init_state_info;

      @verbatim (language="comment", text=
        "error code during the arm activation (return value for UI)")
      int32 init_error;

      @verbatim (language="comment", text=
        "robot-tool-flange analog input measurement information of each channel (unit: Voltage)")
      float__2 tfb_analog_in;

      @verbatim (language="comment", text=
        "robot-tool-flange digital input measurement information of each channel")
      boolean__2 tfb_digital_in;

      @verbatim (language="comment", text=
        "robot-tool-flange digital output information of each channel")
      boolean__2 tfb_digital_out;

      @verbatim (language="comment", text=
        "robot-Tool-Flage output voltage level (unit: Voltage)")
      float tfb_voltage_out;

      @verbatim (language="comment", text=
        "if true, out-collision is detected")
      boolean op_stat_collision_occur;

      @verbatim (language="comment", text=
        "robot Arm device error code during operation")
      int8 op_stat_sos_flag;

      @verbatim (language="comment", text=
        "if true, self-collision is detected")
      boolean op_stat_self_collision;

      @verbatim (language="comment", text=
        "pause state flag")
      boolean op_stat_soft_estop_occur;

      @verbatim (language="comment", text=
        "software (kinematics) emergency stop situation")
      int8 op_stat_ems_flag;

      @verbatim (language="comment", text=
        "information chunk to deliver various state information (please check document)")
      int32 information_chunk_2;

      @verbatim (language="comment", text=
        "information chunk to deliver various state information (please check document)")
      int32 information_chunk_3;

      @verbatim (language="comment", text=
        "if true, detected by inbox # check-function")
      boolean__2 inbox_trap_flag;

      @verbatim (language="comment", text=
        "check-function mode of Inbox #")
      int8__2 inbox_check_mode;

      @verbatim (language="comment", text=
        "external F/T force sensor value")
      float__6 eft;

      @verbatim (language="comment", text=
        "information chunk to deliver various state information (please check document)")
      int32 information_chunk_4;

      @verbatim (language="comment", text=
        "extended I/O board analog input measurement information of each channel (unit: Voltage)")
      float__4 extend_io1_analog_in;

      @verbatim (language="comment", text=
        "extended I/O board analog output information of each channel (unit: Voltage)")
      float__4 extend_io1_analog_out;

      @verbatim (language="comment", text=
        "extended I/O board digital input/output information (please check document)")
      uint32 extend_io1_digital_info;

      @verbatim (language="comment", text=
        "reference angle of each external-joint (auxiliary joint) (unit: rad)")
      float__6 aa_joint_ref;

      @verbatim (language="comment", text=
        "data chunk about the control box safety board")
      uint32 safety_board_stat_info;
    };
  };
};
